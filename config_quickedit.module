<?php

/**
 * @file
 * Contains config_quickedit.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function config_quickedit_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the config_quickedit module.
    case 'help.page.config_quickedit':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_entity_view_alter().
 */
function config_quickedit_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface) {
    /** @var \Drupal\config_quickedit\ViewAlter $viewAlter */
    $viewAlter = \Drupal::service('config_quickedit.view_alter');
    $viewAlter->addLinks($build, $entity);
  }

}

/**
 * Implements hook_preprocess().
 */
function config_quickedit_preprocess(&$variables, $hook) {
  if ($hook == 'field') {
    /** @var \Drupal\config_quickedit\ViewAlter $viewAlter */
    $viewAlter = \Drupal::service('config_quickedit.view_alter');
    // @todo This currently does not work. Is it possible to add contextual links to fields?
    $viewAlter->addFieldLinks($variables);
  }

}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * @todo This currently does not work. Is it possible to add contextual links to fields?
 */
function config_quickedit_preprocess_field(&$variables, $hook) {
  return;
  $element = &$variables['element'];
  if (isset($element['#contextual_links'])) {
    $variables['title_suffix']['contextual_links'] = array(
      '#type' => 'contextual_links_placeholder',
      '#id' => _contextual_links_to_id($element['#contextual_links']),
    );
    if (isset($variables['title_suffix']['contextual_links'])) {

      $element['#markup'] = SafeMarkup::format('<div@attributes></div>', ['@attributes' => new Attribute(['data-contextual-id' => $element['#id']])]);

    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function config_quickedit_contextual_links_view_alter(&$element, $items) {

  if (isset($element['#contextual_links']['config_quickedit'])) {

    // Add attributes to load correct form.
    foreach ($element['#links'] as $id => &$link) {
      // @todo Better way to identify links.
      if (stripos($id, 'config-quickedit') === 0) {
        config_quickedit_add_contextual_links_attribute($link);
      }
    }
  }
  if (isset($element['#links']['block-configure'])) {
    $link = &$element['#links']['block-configure'];
    /** @var \Drupal\Core\Url $url */
    $url = $link['url'];
    $override_url = Url::fromRoute(
      'config_quickedit.configure_block',
      [
        'block' => $url->getRouteParameters()['block'],
      ]
    );
    config_quickedit_add_contextual_links_attribute($link, $override_url->getInternalPath());
  }
}

/**
 * @param array $link
 */
function config_quickedit_add_contextual_links_attribute(array $link, $override_url = '') {
  /** @var \Drupal\Core\Url $url */
  $url = $link['url'];
  $attributes = [
    'data-config-quick-edit-parameters' => json_encode($url->getRouteParameters()),
    // @todo Convert into key to determine which config form to load.
    'data-config-quick-edit-route' => $url->getRouteName(),
    'data-config-quick-edit-path' => $override_url ? :$url->getInternalPath(),
    'class' => ['refreshless-exclude'],
  ];
  $url->setOption('attributes', $attributes);
}

/**
 * Implements hook_toolbar().
 */
function config_quickedit_toolbar() {
  $items = array();
  $items['config_quickedit'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'html_tag',
      '#tag' => 'a',
      '#value' => t('Config Quick Edit'),
    ),
    'tray' => array(
      '#heading' => t('Config QuickEdit'),
      'content' => [
        '#theme' => 'config_quickedit',
      ],
    ),
    '#weight' => 150,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function config_quickedit_theme() {
  return [
    'config_quickedit' => [
      'variables' => [
        'inner' => 'Filler...',
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 *
 * Adds our own form handler classes for quickedit context.
 */
function config_quickedit_entity_type_alter(array &$entity_types) {

  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['entity_view_display']->setFormClass('config_quickedit_full','\Drupal\config_quickedit\Form\MinimalEntityViewDisplayForm');
  $entity_types['entity_view_display']->setFormClass('config_quickedit_formatter','\Drupal\config_quickedit\Form\FieldFormatter');
  $entity_types['block']->setFormClass('config_quickedit','\Drupal\config_quickedit\Form\BlockForm');

}
